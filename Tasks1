#Задание №1

"""
Задания:

Напишите функцию get_sum(value), принимающую любое значение, и возвращающую
сумму его чисел, если это возможно, и None ,если невозможно.
Пример:
get_sum(123)
>>> 6
(т.е. 1+2+3)

"""
def get_sum(value):
    if not value.isdigit():
        return None
    else:
        count = 0
        for elem in value:
            count += int(elem)
        return count

#Задание №2

"""
3. Есть функция:
"""

def add_gold(value):
    if value > 1_000:
        raise RuntimeError('Cannot add so much:( Please mercy!')
    print(f'{value} of gold added:) I am breathtaking!')

"""
Невозможно начислить больше 1000 золота за раз.
Напишите функцию add_some_gold(value), принимающую любое значение, и начислите 
требуемое количество золота используя функцию add_gold.
"""

def add_some_gold(value):
    try:
        add_gold(value)
    except RuntimeError:
        print(f'{value} of gold added:) I am breathtaking!')

#Задание №3

"""
Задания:

В бою находится 3 игрока. Положение игрока на карте описывается тремя координатами
в виде списка [x, y, z]. Центр координат расположен в середине карты. X, y, z в диапазоне от -10 до 10

Необходимо:
1.	Написать функцию generate_coordinates(game_time), принимающую время,
которое игроки должны провести в игре, и возвращающую словарь вида

{время: список координат всех игроков}.

Время изменяется на 1 секунду за раз;
координаты - целые числа, генерируются случайно в разрешённом диапазоне;
игроки могут находиться в одной точке.

2.	Написать функцию extract_coordinates(coordinates),
где coordinates – сгенерированный словарь из generate_coordinates и возвращающую
плоский список неповторяющихся значений координат игроков.

Пример:
coords = generate_coordinates(0)
print(coords)
>>>{0: [[0,1,2], [3,4,5], [6,7,8]]}
extract_coordinates(coords)
>>>[0,1,2,3,4,5,6,7,8]
"""

'''Вот по этому заданию у меня есть вопросы по условию:
1) нужно ли здесть использовать модуль time? Или "время" тут условно 
и просто передается переменная, которая эмитирует время?
2) я написал цикл, который присваивает координаты каждой секунде, 
верно ли я понял задание? 
3) так же, правильно ли я понял, что координаты в каждую секунду времени
могут быть абсолютно рандомными?'''

def generate_coordinates(game_time):
    import random
    result = {}
    for period in range(game_time + 1):
        result[period] = [[random.randint(-10, 10) for i in range(3)] for i in range(3)]
    return result

def extract_coordinates(coordinates):
    result = []
    for value in coordinates.values():
        for items in value:
            for item in items:
                if item not in result:
                    result.append(item)
    return sorted(result)

#Задание на ООП

"""
Задание:

Реализовать 2D-движок, который умеет “рисовать” простейшие двумерные примитивы на экране.

Сам движок должен быть представлен в виде объекта класса Engine2D.
Объект класса имеет поле canvas (холст), представленное в виде list’a.
Движок должен иметь метод публичный метод add, принимающий объект произвольной фигуры и добавляющий ее на холст (Canvas).
Реализовать классы для 3-х геометрических фигур:
Окружность - задается координатой центра и радиусом.
Треугольник - задается тремя точками
Прямоугольник - задается точкой нижнего левого угла и длинами сторон a, b
Каждая фигура должна иметь метод draw(), при вызове которого выводится информация в виде print’а, например “Drawing Circle: (0, 1) with radius 5”.
При завершении добавления фигур, у движка необходимо вызвать публичный метод draw(), который последовательно вызовет методы для отрисовки у всех фигур на холсте и очистит его.
"""
class Engine2D:

    def __init__(self):
        self.canvas = []

    def add(self, obj):
        self.canvas.append(obj)

    def draw(self):
        for obj in self.canvas:
             obj.draw()
        self.canvas = []

class Circle:

    def __init__(self, center, radius):
        self.center = center
        self.radius = radius

    def draw(self):
        return print(f'Drawing Circle: {self.center} with radius {self.radius}')

class Triangle:

    def __init__(self, A, B, C):
        self.A = A
        self.B = B
        self.C = C

    def draw(self):
        return print(f'Drawing Triangle: {self.A}, {self.B} and {self.C}')

class Square:

    def __init__(self, spot, a, b):
        self.spot = spot
        self.a = a
        self.b = b

    def draw(self):
        return print(f'Drawing Square: low-left spot is {self.spot} with {self.a} and {self.b} sides')
