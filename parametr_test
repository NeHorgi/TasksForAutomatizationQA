import pytestTable1
import pytest

nums = [10 ** 7, 1.5 * 10 ** 7, 5 * 10 ** 7, 10 ** 8, 10 ** 9, 1.5 * 10 ** 9] #Массив со значениями, для которых тест должен выполнятся 
wiki_table = pytestTable1.result                                              #Экземпляр обработанной таблицы с вики

'''
Здесь я инициализирую фикстуру, для того, чтобы можно было пройтись тестами по каждому элементу массива, представляющего собой
копию таблицы, полученной в прошлом модуле. Использую здесь компонент request, чтобы передавать в тест каждый раз следующую строку
из таблицы
'''

@pytest.fixture(params=wiki_table)  
def wiki_rows(request):            
    return request.param           

'''
Здесь я прописываю функцию для инициализации текстового сопровождения для результата теста (как того требует задание)
'''

def id_func(test_data, num):      
    return f"{test_data[0]} (Frontend:{test_data[2]}|Backend:{test_data[3]}) has {test_data[1]} unique visitors per month. (Expected more than {num})"
    
'''
Ну и тут начинает работу непосредственно сам тест, а именно - сначала пишем параметризированную метку,
дабы наш тест был параметрезированный и принимал сразу несколько значений. Далее, пишу тестовую функцию,
которая сравнивает передаваемое значение из массива со значениями, для которых должен выполнятся тест, 
и полей полученной ранее таблицы с вики (1-го ее элемента по индексу - кол-во пользователей) и сравниваю 
их, и если сравнение не верно, выдает False, то инициализируется assert с соотв. текстом.
'''

@pytest.mark.parametrize('num', nums)                            
def test_popylarity(wiki_rows, num):                             
    assert int(num) > int(wiki_rows[1]), id_func(wiki_rows, num)  
                                                                  
                                                                  
